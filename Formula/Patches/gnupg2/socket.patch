--- a/Makefile.in
+++ b/Makefile.in
@@ -830,7 +830,7 @@
 	       $(distcleancheck_listfiles) ; \
 	       exit 1; } >&2
 check-am: all-am
-check: check-recursive
+check:
 all-am: Makefile $(DATA) config.h
 installdirs: installdirs-recursive
 installdirs-am:
--- a/agent/gpg-agent.c
+++ b/agent/gpg-agent.c
@@ -1499,18 +1499,25 @@
     name = make_filename (opt.homedir, standard_name, NULL);
   else
     {
-      name = xstrdup (template);
-      p = strrchr (name, '/');
-      if (!p)
-	BUG ();
-      *p = 0;
-      if (!mkdtemp (name))
-	{
-	  log_error (_("can't create directory `%s': %s\n"),
-		     name, strerror (errno));
-	  agent_exit (2);
-	}
-      *p = '/';
+		name = "/tmp/gpg-agent";
+		mode_t _umask = umask(0);
+		if (mkdir(name, 0777) && errno != EEXIST) {
+			log_error (_("can't create directory `%s': %s\n"), name, strerror(errno));
+			agent_exit (2);
+		}
+		name = make_filename (name, getenv("USER"), NULL);
+		if (mkdir(name, 0700) && errno != EEXIST) {
+			log_error (_("can't create directory `%s': %s\n"), name, strerror(errno));
+			agent_exit (2);
+		}
+		struct stat state;
+		if (stat(name, &state) || state.st_mode != 040700 || state.st_uid != getuid()) {
+			log_error ("wrong permissions `%s': %s\n", name, strerror(errno));
+			agent_exit (2);
+		}
+		
+		name = make_filename (name, standard_name, NULL);
+		umask(_umask);
     }
 
   if (strchr (name, PATHSEP_C))
@@ -1558,9 +1565,9 @@
   strcpy (serv_addr->sun_path, name);
   len = SUN_LEN (serv_addr);
   rc = assuan_sock_bind (fd, (struct sockaddr*) serv_addr, len);
-  if (opt.use_standard_socket && rc == -1 && errno == EADDRINUSE)
+  if (rc == -1 && errno == EADDRINUSE)
     {
-      /* Check whether a gpg-agent is already running on the standard
+      /* Check whether a gpg-agent is already running on this
          socket.  We do this test only if this is not the ssh socket.
          For ssh we assume that a test for gpg-agent has already been
          done and reuse the requested ssh socket.  Testing the
@@ -1591,8 +1598,7 @@
                  gpg_strerror (gpg_error_from_errno (errno)));
 
       assuan_sock_close (fd);
-      if (opt.use_standard_socket)
-        *name = 0; /* Inhibit removal of the socket by cleanup(). */
+	  *name = 0; /* Inhibit removal of the socket by cleanup(). */
       agent_exit (2);
     }
 
@@ -2443,13 +2449,15 @@
   char *sockname;
   pth_attr_t tattr;
 
-  if (!opt.use_standard_socket)
-    return; /* This check makes only sense in standard socket mode.  */
-
   if (check_own_socket_running || shutdown_pending)
     return;  /* Still running or already shutting down.  */
 
-  sockname = make_filename (opt.homedir, "S.gpg-agent", NULL);
+	if (opt.use_standard_socket) {
+		sockname = make_filename (opt.homedir, "S.gpg-agent", NULL);
+	} else {
+		sockname = make_filename ("/tmp/gpg-agent", getenv("USER"), "S.gpg-agent", NULL);
+	}
+
   if (!sockname)
     return; /* Out of memory.  */
 
@@ -2515,16 +2523,28 @@
             return 0; /* Okay, its running on the standard socket. */
           return -1;
         }
+		
+		rc = assuan_new (&ctx);
+		if (! rc)
+			rc = assuan_socket_connect (ctx, infostr, pid, 0);
     }
   else /* MODE != 0 */
     {
       infostr = make_filename (opt.homedir, "S.gpg-agent", NULL);
       pid = (pid_t)(-1);
+		
+	  rc = assuan_new (&ctx);
+	  if (!rc) {
+        rc = assuan_socket_connect (ctx, infostr, pid, 0);
+		  if (rc) {
+			  xfree (infostr);
+			  infostr = make_filename ("/tmp/gpg-agent", getenv("USER"), "S.gpg-agent", NULL);
+			  rc = assuan_socket_connect (ctx, infostr, pid, 0);
+		  }
+		  
+	  }
     }
 
-  rc = assuan_new (&ctx);
-  if (! rc)
-    rc = assuan_socket_connect (ctx, infostr, pid, 0);
   xfree (infostr);
   if (rc)
     {
--- a/common/asshelp.c
+++ b/common/asshelp.c
@@ -286,6 +286,12 @@
       sockname = make_filename (homedir, "S.gpg-agent", NULL);
       err = assuan_socket_connect (ctx, sockname, 0, 0);
 
+      if (err) {
+          sockname = make_filename ("/tmp/gpg-agent", getenv("USER"), "S.gpg-agent", NULL);
+          err = assuan_socket_connect (ctx, sockname, 0, 0);
+      }
+
+		
       if (err)
         {
           /* With no success start a new server.  */
@@ -309,21 +315,27 @@
           if (!agent_program || !*agent_program)
             agent_program = gnupg_module_name (GNUPG_MODULE_NAME_AGENT);
 
-          argv[0] = "--use-standard-socket-p"; 
-          argv[1] = NULL;  
-          err = gnupg_spawn_process_fd (agent_program, argv, -1, -1, -1, &pid);
-          if (err)
-            log_debug ("starting `%s' for testing failed: %s\n",
-                       agent_program, gpg_strerror (err));
-          else if ((err = gnupg_wait_process (agent_program, pid, &excode)))
-            {
-              if (excode == -1)
-                log_debug ("running `%s' for testing failed: %s\n",
-                           agent_program, gpg_strerror (err));
-            }          
-
-          if (!err && !excode)
+			
+			argv[0] = "--use-standard-socket-p";
+			argv[1] = NULL;
+			err = gnupg_spawn_process_fd (agent_program, argv, -1, -1, -1, &pid);
+			if (err)
+				log_debug ("starting `%s' for testing failed: %s\n",
+						   agent_program, gpg_strerror (err));
+			else if ((err = gnupg_wait_process (agent_program, pid, &excode)))
             {
+				if (excode == -1)
+					log_debug ("running `%s' for testing failed: %s\n",
+							   agent_program, gpg_strerror (err));
+            }
+			
+			if (!err && !excode) {
+				sockname = make_filename (homedir, "S.gpg-agent", NULL);
+			} else {
+				sockname = make_filename ("/tmp/gpg-agent", getenv("USER"), "S.gpg-agent", NULL);
+			}
+			
+			
               /* If the agent has been configured for use with a
                  standard socket, an environment variable is not
                  required and thus we we can savely start the agent
@@ -331,8 +343,7 @@
               lock_agent_t lock;
 
               argv[0] = "--daemon";
-              argv[1] = "--use-standard-socket"; 
-              argv[2] = NULL;  
+              argv[1] = NULL;
 
               if (!(err = lock_agent_spawning (&lock, homedir))
                   && assuan_socket_connect (ctx, sockname, 0, 0))
@@ -359,36 +370,6 @@
                 }
 
               unlock_agent_spawning (&lock);
-            }
-          else
-            {
-              /* If using the standard socket is not the default we
-                 start the agent as a pipe server which gives us most
-                 of the required features except for passphrase
-                 caching etc.  */
-              const char *pgmname;
-              int no_close_list[3];
-              int i;
-              
-              if ( !(pgmname = strrchr (agent_program, '/')))
-                pgmname = agent_program;
-              else
-                pgmname++;
-              
-              argv[0] = pgmname;
-              argv[1] = "--server";
-              argv[2] = NULL;
-              
-              i=0;
-              if (log_get_fd () != -1)
-                no_close_list[i++] = assuan_fd_from_posix_fd (log_get_fd ());
-              no_close_list[i++] = assuan_fd_from_posix_fd (fileno (stderr));
-              no_close_list[i] = -1;
-              
-              /* Connect to the agent and perform initial handshaking. */
-              err = assuan_pipe_connect (ctx, agent_program, argv,
-                                         no_close_list, NULL, NULL, 0);
-            }
         }
       xfree (sockname);
     }
