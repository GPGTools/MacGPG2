diff --git a/Library/Homebrew/blacklist.rb b/Library/Homebrew/blacklist.rb
index e012a07..7f4b7bb 100644
--- a/Library/Homebrew/blacklist.rb
+++ b/Library/Homebrew/blacklist.rb
@@ -6,11 +6,6 @@ def blacklisted? name
   when 'libarchive', 'libpcap' then <<-EOS.undent
     Apple distributes #{name} with OS X, you can find it in /usr/lib.
     EOS
-  when 'libiconv' then <<-EOS.undent
-    Apple distributes #{name} with OS X, you can find it in /usr/lib.
-    Some build scripts fail to detect it correctly, please check existing
-    formulae for solutions.
-    EOS
   when 'wxpython' then <<-EOS.undent
     The Python bindings (import wx) for wxWidgets are installed by:
         brew install wxwidgets
diff --git a/Library/Homebrew/extend/ARGV.rb b/Library/Homebrew/extend/ARGV.rb
index 6b4d925..67121b2 100644
--- a/Library/Homebrew/extend/ARGV.rb
+++ b/Library/Homebrew/extend/ARGV.rb
@@ -125,6 +125,10 @@ module HomebrewArgvExtension
   def build_universal?
     include? '--universal'
   end
+  
+  def build_env
+    ENV['HOMEBREW_GPGTOOLS_BUILD_ENV'] || HOMEBREW_GPGTOOLS_BUILD_ENV 
+  end
 
   # Request a 32-bit only build.
   # This is needed for some use-cases though we prefer to build Universal
diff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb
index 71e89a6..2fcf19f 100644
--- a/Library/Homebrew/extend/ENV/std.rb
+++ b/Library/Homebrew/extend/ENV/std.rb
@@ -285,6 +285,24 @@ module Stdenv
       replace_in_cflags(/-march=\S*/, "-Xarch_#{Hardware::CPU.arch_32_bit} \\0")
     end
   end
+  
+  def build_32_bit
+    %w{ CFLAGS LDFLAGS }.each do |compiler_flag|
+      remove compiler_flag, "-arch x86_64"
+      append compiler_flag, "-arch i386"
+    end
+    
+    replace_in_cflags(/-march=\S*/, '')
+  end
+  
+  def build_64_bit
+    %w{ CFLAGS LDFLAGS }.each do |compiler_flag|
+      remove compiler_flag, "-arch i386"
+      append compiler_flag, "-arch x86_64"
+    end
+    
+    replace_in_cflags(/-march=\S*/, '')
+  end
 
   def cxx11
     if compiler == :clang
diff --git a/Library/Homebrew/formula.rb b/Library/Homebrew/formula.rb
index bf784d0..a4196b3 100644
--- a/Library/Homebrew/formula.rb
+++ b/Library/Homebrew/formula.rb
@@ -238,7 +238,13 @@
   def keg_only_reason
     self.class.keg_only_reason
   end
-
+  
+  # Homebrew fixes the install names per default.
+  # Use this option to disable it.
+  def keep_install_names?
+    self.class.keep_install_names || false
+  end
+  
   def fails_with? cc
     cc = Compiler.new(cc) unless cc.is_a? Compiler
     (self.class.cc_failures || []).any? do |failure|
@@ -668,7 +668,7 @@
   class << self

     attr_reader :keg_only_reason, :cc_failures
-    attr_rw :homepage, :plist_startup, :plist_manual
+    attr_rw :homepage, :plist_startup, :plist_manual, :keep_install_names

     def specs
       @specs ||= [stable, devel, head, bottle].freeze
diff --git a/Library/Homebrew/formula_installer.rb b/Library/Homebrew/formula_installer.rb
index 9b2ccce..e06dd51 100644
--- a/Library/Homebrew/formula_installer.rb
+++ b/Library/Homebrew/formula_installer.rb
@@ -327,7 +327,11 @@ class FormulaInstaller
       link
     end
 
-    fix_install_names if OS.mac?
+    unless f.keep_install_names?
+      fix_install_names
+    else
+      rpath_install_names
+    end
 
     post_install
 
@@ -349,6 +353,16 @@ class FormulaInstaller
     s
   end
 
+  def rpath_install_names
+    Keg.new(f.prefix).rpath_install_names
+  rescue Exception => e
+    onoe "Failed to fix install names"
+    puts "The formula built, but you may encounter issues using it or linking other"
+    puts "formula against it."
+    ohai e, e.backtrace if ARGV.debug?
+    @show_summary_heading = true
+  end
+
   def build_time
     @build_time ||= Time.now - @start_time unless pour_bottle? or ARGV.interactive? or @start_time.nil?
   end
diff --git a/Library/Homebrew/global.rb b/Library/Homebrew/global.rb
index dc2379b..72a2457 100644
--- a/Library/Homebrew/global.rb
+++ b/Library/Homebrew/global.rb
@@ -64,6 +64,9 @@ else
   HOMEBREW_REPOSITORY+"Cellar"
 end
 
+# GPGTools Homebrew build environment.
+HOMEBREW_GPGTOOLS_BUILD_ENV = "/"
+
 HOMEBREW_LOGS = Pathname.new(ENV['HOMEBREW_LOGS'] || '~/Library/Logs/Homebrew/').expand_path
 
 HOMEBREW_TEMP = Pathname.new(ENV.fetch('HOMEBREW_TEMP', '/tmp'))
diff --git a/Library/Homebrew/keg.rb b/Library/Homebrew/keg.rb
index 8ad5ffa..5d3b551 100644
--- a/Library/Homebrew/keg.rb
+++ b/Library/Homebrew/keg.rb
@@ -12,8 +12,8 @@ class Keg < Pathname
   # locale-specific directories have the form language[_territory][.codeset][@modifier]
   LOCALEDIR_RX = /(locale|man)\/([a-z]{2}|C|POSIX)(_[A-Z]{2})?(\.[a-zA-Z\-0-9]+(@.+)?)?/
   INFOFILE_RX = %r[info/([^.].*?\.info|dir)$]
-  TOP_LEVEL_DIRECTORIES = %w[bin etc include lib sbin share var Frameworks]
-  PRUNEABLE_DIRECTORIES = %w[bin etc include lib sbin share Frameworks LinkedKegs].map do |d|
+  TOP_LEVEL_DIRECTORIES = %w[bin etc libexec include lib sbin share var Frameworks]
+  PRUNEABLE_DIRECTORIES = %w[bin etc libexec include lib sbin share Frameworks LinkedKegs].map do |d|
     case d when 'LinkedKegs' then HOMEBREW_LIBRARY/d else HOMEBREW_PREFIX/d end
   end
 
diff --git a/Library/Homebrew/keg_fix_install_names.rb b/Library/Homebrew/keg_fix_install_names.rb
index 3fc827b..19ff28f 100644
--- a/Library/Homebrew/keg_fix_install_names.rb
+++ b/Library/Homebrew/keg_fix_install_names.rb
@@ -17,6 +17,35 @@ class Keg
       end
     end
   end
+  
+  def rpath_install_names
+    ohai "Fixing libs to use @rpath"
+    mach_o_files.each do |file|
+      file.ensure_writable do
+        if file.dylib?
+          dylib_name = file.to_s
+          dylib_basename = Pathname.new(file).relative_path_from(join 'lib')
+          # Change the absolute path to @rpath/dylib using install_name_tool -id.
+          system MacOS.locate("install_name_tool"), "-id", "@rpath/#{dylib_basename}", "#{dylib_name}"
+        end
+      end
+    end
+    
+    ohai "Adding @rpath to binaries"
+    lib = join 'lib'
+    binaries.each do |binary|
+      absolute_install_names_for binary do |id, absolute_names|
+        binary.ensure_writable do
+          system "install_name_tool", "-add_rpath", "@loader_path/../lib", "#{binary}"
+          system "install_name_tool", "-add_rpath", "#{lib}", "#{binary}"
+          absolute_names.each do |absolute_name|
+            dylib_basename = Pathname.new(absolute_name).relative_path_from(lib)
+            system "install_name_tool", "-change", "#{absolute_name}", "@rpath/#{dylib_basename}", "#{binary}"
+          end
+        end
+      end
+    end
+  end
 
   def relocate_install_names old_prefix, new_prefix, old_cellar, new_cellar, options={}
     mach_o_files.each do |file|
@@ -118,6 +147,25 @@ class Keg
 
   def lib; join 'lib' end
 
+  def absolute_install_names_for binary
+    binary = binary.to_s
+  
+    ENV['HOMEBREW_BINARY'] = binary # solves all shell escaping problems
+    install_names = `otool -L "$HOMEBREW_BINARY"`.split "\n"
+    
+    install_names.shift # first line is fluff
+    install_names.map!{ |s| OTOOL_RX =~ s && $1 }
+    install_names.compact!
+    # Only include those dylibs which are point into HOMEBREW_PREFIX
+    install_names.reject!{ |fn| !(fn =~ /^#{HOMEBREW_PREFIX}/) }
+    
+    # the shortpath ensures that library upgrades don’t break installed tools
+    shortpath = HOMEBREW_PREFIX + Pathname.new(binary).relative_path_from(self)
+    id = if shortpath.exist? then shortpath else binary end
+    
+    yield id, install_names
+  end
+
   def each_install_name_for file, &block
     dylibs = file.dynamically_linked_libraries
     dylibs.reject! { |fn| fn =~ /^@(loader_|executable_|r)path/ }
diff --git a/Library/Homebrew/utils.rb b/Library/Homebrew/utils.rb
index 2bc7297..dd12f3c 100644
--- a/Library/Homebrew/utils.rb
+++ b/Library/Homebrew/utils.rb
@@ -142,6 +142,10 @@ def curl *args
   args << "--verbose" if ENV['HOMEBREW_CURL_VERBOSE']
   args << "--silent" unless $stdout.tty?
 
+  if !$stdout.tty? || ARGV.quieter?
+    args << "--silent"
+  end
+
   safe_system curl, *args
 end
 
diff --git a/Library/Homebrew/download_strategy.rb b/Library/Homebrew/download_strategy.rb
index e7e482e..3d9ac7f 100644
--- a/Library/Homebrew/download_strategy.rb
+++ b/Library/Homebrew/download_strategy.rb
@@ -606,6 +606,36 @@ class GitDownloadStrategy < VCSDownloadStrategy
   end
 end
 
+class FileDownloadStrategy < AbstractDownloadStrategy
+  def initialize name, package
+    super
+    @unique_token="#{name}-#{package.version}--directory" unless name.to_s.empty? or name == '__UNKNOWN__'
+    @clone=HOMEBREW_CACHE+@unique_token
+  end
+
+  def cached_location
+    @clone
+  end
+
+  def fetch
+    @url=@url.sub! "file://", ""
+    raise "#{@url}´is not a directory" unless File.directory?(@url)
+
+    ohai "Cloning #{@url}"
+    
+    # Copy directory to clone location if it doesn't
+    # exist yet.
+    FileUtils.cp_r @url, @clone unless @clone.exist?
+  end
+
+  def stage
+    dst = Dir.getwd
+    Dir.chdir @clone do
+      FileUtils.cp_r ".", dst
+    end
+  end
+end
+
 class CVSDownloadStrategy < VCSDownloadStrategy
   def cvspath
     @path ||= %W[
@@ -819,6 +849,8 @@ class DownloadStrategyDetector
     when %r[^http://www.apache.org/dyn/closer.cgi] then CurlApacheMirrorDownloadStrategy
       # Common URL patterns
     when %r[^https?://svn\.] then SubversionDownloadStrategy
+      # Local directory
+    when %r[^file://] then FileDownloadStrategy
     when bottle_native_regex, bottle_regex
       CurlBottleDownloadStrategy
       # Otherwise just try to download

--- a/Library/Homebrew/keg_fix_install_names.rb	2014-01-25 18:18:02.000000000 +0100
+++ b/Library/Homebrew/keg_fix_install_names.rb	2014-01-25 18:18:37.000000000 +0100
@@ -166,6 +166,14 @@
     yield id, install_names
   end
 
+  def binaries
+    if(bin = join 'bin').directory?
+      bin.children.select { |pn| not pn.symlink? }
+    else
+      []
+    end
+  end
+
   def each_install_name_for file, &block
     dylibs = file.dynamically_linked_libraries
     dylibs.reject! { |fn| fn =~ /^@(loader_|executable_|r)path/ }
