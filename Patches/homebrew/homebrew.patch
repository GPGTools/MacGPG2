diff --git a/Library/Homebrew/blacklist.rb b/Library/Homebrew/blacklist.rb
index e012a07..7f4b7bb 100644
--- a/Library/Homebrew/blacklist.rb
+++ b/Library/Homebrew/blacklist.rb
@@ -6,11 +6,6 @@ def blacklisted? name
   when 'libarchive', 'libpcap' then <<-EOS.undent
     Apple distributes #{name} with OS X, you can find it in /usr/lib.
     EOS
-  when 'libiconv' then <<-EOS.undent
-    Apple distributes #{name} with OS X, you can find it in /usr/lib.
-    Some build scripts fail to detect it correctly, please check existing
-    formulae for solutions.
-    EOS
   when 'libxml', 'libxlst' then <<-EOS.undent
     Apple distributes #{name} with OS X, you can find it in /usr/lib.
     However not all build scripts look for these hard enough, so you may need
diff --git a/Library/Homebrew/extend/ARGV.rb b/Library/Homebrew/extend/ARGV.rb
index 6b4d925..67121b2 100644
--- a/Library/Homebrew/extend/ARGV.rb
+++ b/Library/Homebrew/extend/ARGV.rb
@@ -121,6 +121,14 @@ module HomebrewArgvExtension
   def build_universal?
     include? '--universal'
   end
+  
+  def build_env
+    ENV['HOMEBREW_GPGTOOLS_BUILD_ENV'] || HOMEBREW_GPGTOOLS_BUILD_ENV 
+  end
+  
+  def build_ppc?
+    include? '--with-ppc'
+  end
 
   # Request a 32-bit only build.
   # This is needed for some use-cases though we prefer to build Universal
diff --git a/Library/Homebrew/extend/ENV.rb b/Library/Homebrew/extend/ENV.rb
index 2c01085..57649d9 100644
--- a/Library/Homebrew/extend/ENV.rb
+++ b/Library/Homebrew/extend/ENV.rb
@@ -210,7 +210,13 @@ module HomebrewEnvExtension
       remove 'CMAKE_FRAMEWORK_PATH', "#{sdk}/System/Library/Frameworks"
     end
   end
-
+  
+  def osx_10_5
+    self['MACOSX_DEPLOYMENT_TARGET']="10.5"
+    remove_from_cflags(/ ?-mmacosx-version-min=10\.\d/)
+    append_to_cflags('-mmacosx-version-min=10.5')
+  end
+  
   def macosxsdk v=MacOS.version
     # Sets all needed lib and include dirs to CFLAGS, CPPFLAGS, LDFLAGS.
     remove_macosxsdk
@@ -307,8 +313,45 @@ module HomebrewEnvExtension
       # Can't mix "-march" for a 32-bit CPU  with "-arch x86_64"
       replace_in_cflags(/-march=\S*/, '-Xarch_i386 \0') if Hardware.is_32_bit?
     end
+    
+    # Also build PPC but with local jail containing the compiler.
+    ARGV.build_ppc? && build_ppc
+  end
+  
+  def build_ppc
+    # Remove -mssex flag because it isn't supported by ppc cc1.
+    replace_in_cflags(/-msse\S*/, '')
+    replace_in_cflags(/-march=\S*/, '')
+    # Add the arch ppc to compile and linker flags.
+    append_to_cflags '-arch ppc'
+    append 'LDFLAGS', '-arch ppc'
+    # Use the LLVM-CC compiler from the build-env.
+    self['LD'] = self['CC'] = "#{ARGV.build_env}/usr/bin/llvm-gcc"
+    # Set the min version to 10.5
+    osx_10_5
+    append_to_cflags("-isysroot #{ARGV.build_env}/SDKs/MacOSX10.5.sdk")
+    append_to_cflags("-isystem #{ARGV.build_env}/SDKs/MacOSX10.5.sdk/include")
+    append_to_cflags("-DUNIX")
+  end
+  
+  def build_32_bit
+    %w{ CFLAGS LDFLAGS }.each do |compiler_flag|
+      remove compiler_flag, "-arch x86_64"
+      append compiler_flag, "-arch i386"
+    end
+    
+    replace_in_cflags(/-march=\S*/, '')
+  end
+  
+  def build_64_bit
+    %w{ CFLAGS LDFLAGS }.each do |compiler_flag|
+      remove compiler_flag, "-arch i386"
+      append compiler_flag, "-arch x86_64"
+    end
+    
+    replace_in_cflags(/-march=\S*/, '')
   end
-
+  
   def replace_in_cflags before, after
     cc_flag_vars.each do |key|
       self[key] = self[key].sub before, after if self[key]
diff --git a/Library/Homebrew/formula.rb b/Library/Homebrew/formula.rb
index bf784d0..a4196b3 100644
--- a/Library/Homebrew/formula.rb
+++ b/Library/Homebrew/formula.rb
@@ -191,7 +191,13 @@ class Formula
   def keg_only_reason
     self.class.keg_only_reason
   end
-
+  
+  # Homebrew fixes the install names per default.
+  # Use this option to disable it.
+  def keep_install_names?
+    self.class.keep_install_names || false
+  end
+  
   def fails_with? cc
     return false if self.class.cc_failures.nil?
     cc = Compiler.new(cc) unless cc.is_a? Compiler
@@ -633,7 +639,7 @@ private
       end
     end
 
-    attr_rw :homepage, :keg_only_reason, :skip_clean_all, :cc_failures
+    attr_rw :homepage, :keg_only_reason, :skip_clean_all, :cc_failures, :keep_install_names
 
     Checksum::TYPES.each do |cksum|
       class_eval %Q{
diff --git a/Library/Homebrew/formula_installer.rb b/Library/Homebrew/formula_installer.rb
index d9cff50..af327f0 100644
--- a/Library/Homebrew/formula_installer.rb
+++ b/Library/Homebrew/formula_installer.rb
@@ -187,14 +187,28 @@ class FormulaInstaller
     end
 
     install_plist
-    fix_install_names
-
+    unless f.keep_install_names?
+      fix_install_names
+    else
+      rpath_install_names
+    end
+    
     ohai "Summary" if ARGV.verbose? or show_summary_heading
     print "#{f.prefix}: #{f.prefix.abv}"
     print ", built in #{pretty_duration build_time}" if build_time
     puts
   end
 
+  def rpath_install_names
+    Keg.new(f.prefix).rpath_install_names
+  rescue Exception => e
+    onoe "Failed to fix install names"
+    puts "The formula built, but you may encounter issues using it or linking other"
+    puts "formula against it."
+    ohai e, e.backtrace if ARGV.debug?
+    @show_summary_heading = true
+  end
+
   def build_time
     @build_time ||= Time.now - @start_time unless install_bottle or ARGV.interactive? or @start_time.nil?
   end
diff --git a/Library/Homebrew/global.rb b/Library/Homebrew/global.rb
index 12157b0..f7cdc2d 100644
--- a/Library/Homebrew/global.rb
+++ b/Library/Homebrew/global.rb
@@ -58,6 +58,9 @@ else
   HOMEBREW_REPOSITORY+"Cellar"
 end
 
+# GPGTools Homebrew build environment.
+HOMEBREW_GPGTOOLS_BUILD_ENV = "/"
+
 HOMEBREW_LOGS = Pathname.new('~/Library/Logs/Homebrew/').expand_path
 
 if RUBY_PLATFORM =~ /darwin/
diff --git a/Library/Homebrew/keg.rb b/Library/Homebrew/keg.rb
index 3bae926..5247ef1 100644
--- a/Library/Homebrew/keg.rb
+++ b/Library/Homebrew/keg.rb
@@ -29,7 +29,7 @@ class Keg < Pathname
   def unlink
     n=0
 
-    %w[bin etc lib include sbin share var].map{ |d| self/d }.each do |src|
+    %w[bin etc lib libexec include sbin share var].map{ |d| self/d }.each do |src|
       next unless src.exist?
       src.find do |src|
         next if src == self
diff --git a/Library/Homebrew/keg_fix_install_names.rb b/Library/Homebrew/keg_fix_install_names.rb
index a6d4e68..ea9aa43 100644
--- a/Library/Homebrew/keg_fix_install_names.rb
+++ b/Library/Homebrew/keg_fix_install_names.rb
@@ -29,13 +29,71 @@ class Keg
       end
     end
   end
-
+  
+  def rpath_install_names
+    ohai "Fixing libs to use @rpath"
+    mach_o_files.each do |file|
+      file.ensure_writable do
+        if file.dylib?
+          dylib_name = file.to_s
+          dylib_basename = Pathname.new(file).relative_path_from(join 'lib')
+          # Change the absolute path to @rpath/dylib using install_name_tool -id.
+          system MacOS.locate("install_name_tool"), "-id", "@rpath/#{dylib_basename}", "#{dylib_name}"
+        end
+      end
+    end
+    
+    ohai "Adding @rpath to binaries"
+    lib = join 'lib'
+    binaries.each do |binary|
+      absolute_install_names_for binary do |id, absolute_names|
+        binary.ensure_writable do
+          system "install_name_tool", "-add_rpath", "@loader_path/../lib", "#{binary}"
+          system "install_name_tool", "-add_rpath", "#{lib}", "#{binary}"
+          absolute_names.each do |absolute_name|
+            dylib_basename = Pathname.new(absolute_name).relative_path_from(lib)
+            system "install_name_tool", "-change", "#{absolute_name}", "@rpath/#{dylib_basename}", "#{binary}"
+          end
+        end
+      end
+    end
+  end
+  
+  
+  
   private
 
   OTOOL_RX = /\t(.*) \(compatibility version (\d+\.)*\d+, current version (\d+\.)*\d+\)/
 
   def lib; join 'lib' end
 
+  def absolute_install_names_for binary
+    binary = binary.to_s
+  
+    ENV['HOMEBREW_BINARY'] = binary # solves all shell escaping problems
+    install_names = `otool -L "$HOMEBREW_BINARY"`.split "\n"
+    
+    install_names.shift # first line is fluff
+    install_names.map!{ |s| OTOOL_RX =~ s && $1 }
+    install_names.compact!
+    # Only include those dylibs which are point into HOMEBREW_PREFIX
+    install_names.reject!{ |fn| !(fn =~ /^#{HOMEBREW_PREFIX}/) }
+    
+    # the shortpath ensures that library upgrades donâ€™t break installed tools
+    shortpath = HOMEBREW_PREFIX + Pathname.new(binary).relative_path_from(self)
+    id = if shortpath.exist? then shortpath else binary end
+    
+    yield id, install_names
+  end
+  
+  def binaries
+    if(bin = join 'bin').directory?
+      bin.children.select { |pn| not pn.symlink? }
+    else
+      []
+    end
+  end
+  
   def bad_install_names_for file
     ENV['HOMEBREW_MACH_O_FILE'] = file.to_s # solves all shell escaping problems
     install_names = `#{MacOS.locate("otool")} -L "$HOMEBREW_MACH_O_FILE"`.split "\n"
diff --git a/Library/Homebrew/utils.rb b/Library/Homebrew/utils.rb
index 0970f99..d9d9694 100644
--- a/Library/Homebrew/utils.rb
+++ b/Library/Homebrew/utils.rb
@@ -125,7 +125,11 @@ def curl *args
   args << "--insecure" if MacOS.version < 10.6
   args << "--verbose" if ENV['HOMEBREW_CURL_VERBOSE']
   args << "--silent" unless $stdout.tty?
-
+  
+  if !$stdout.tty? || ARGV.quieter?
+    args << "--silent"
+  end
+  
   safe_system curl, *args
 end
 
diff --git a/Library/Homebrew/download_strategy.rb b/Library/Homebrew/download_strategy.rb
index 68a91d0..e737cde 100644
--- a/Library/Homebrew/download_strategy.rb
+++ b/Library/Homebrew/download_strategy.rb
@@ -399,6 +399,37 @@ class GitDownloadStrategy < AbstractDownloadStrategy
   end
 end
 
+class FileDownloadStrategy < AbstractDownloadStrategy
+  def initialize name, package
+    super
+    @unique_token="#{name}-#{package.version}--directory" unless name.to_s.empty? or name == '__UNKNOWN__'
+    @clone=HOMEBREW_CACHE+@unique_token
+  end
+
+  def cached_location
+    @clone
+  end
+
+  def fetch
+    @url=@url.sub! "file://", ""
+    raise "#{@url}Â´is not a directory" unless File.directory?(@url)
+
+    ohai "Cloning #{@url}"
+    
+    # Copy directory to clone location if it doesn't
+    # exist yet.
+    FileUtils.cp_r @url, @clone unless @clone.exist?
+  end
+
+  def stage
+    dst = Dir.getwd
+    Dir.chdir @clone do
+      FileUtils.cp_r ".", dst
+    end
+  end
+end
+
+
 class CVSDownloadStrategy < AbstractDownloadStrategy
   def initialize name, package
     super
@@ -599,6 +630,8 @@ class DownloadStrategyDetector
     when %r[^http://www.apache.org/dyn/closer.cgi] then CurlApacheMirrorDownloadStrategy
       # Common URL patterns
     when %r[^https?://svn\.] then SubversionDownloadStrategy
+      # Local directory
+    when %r[^file://] then FileDownloadStrategy
     when bottle_native_regex, bottle_regex, old_bottle_regex
       CurlBottleDownloadStrategy
       # Otherwise just try to download
