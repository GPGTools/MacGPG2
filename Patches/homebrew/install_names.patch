diff --git a/Library/Homebrew/extend/pathname.rb b/Library/Homebrew/extend/pathname.rb
index 018547f..7f1548a 100644
--- a/Library/Homebrew/extend/pathname.rb
+++ b/Library/Homebrew/extend/pathname.rb
@@ -234,7 +234,14 @@ class Pathname
     Dir.chdir self.dirname do
       # TODO use Ruby function so we get exceptions
       # NOTE Ruby functions may work, but I had a lot of problems
-      rv = system 'ln', '-sf', src.relative_path_from(self.dirname), self.basename
+      # @rpath only works if the files are not symlinked, otherwise
+      # the libraries are not found, since ../lib is found and the symlink
+      # points to the Cellar prefix.
+      if (src.relative_path_from(self.dirname)).directory?
+        rv = system 'ln', '-sf', src.relative_path_from(self.dirname), self.basename
+      else
+        rv = system 'ln', '-f', src.relative_path_from(self.dirname), self.basename
+      end
       unless rv and $? == 0
         raise <<-EOS.undent
           Could not create symlink #{to_s}.

diff --git a/Library/Homebrew/formula.rb b/Library/Homebrew/formula.rb
index 9b3c0ac..b48d62b 100644
--- a/Library/Homebrew/formula.rb
+++ b/Library/Homebrew/formula.rb
@@ -237,6 +237,12 @@ class Formula
     self.class.keg_only_reason || false
   end
 
+  # Homebrew fixes the install names per default.
+  # Use this option to disable it.
+  def keep_install_names?
+    self.class.keep_install_names || false
+  end
+
   def fails_with_llvm?
     llvm = self.class.fails_with_llvm_reason
     if llvm
@@ -737,6 +755,7 @@ EOF
     attr_rw :keg_only_reason, :fails_with_llvm_reason, :skip_clean_all
     attr_rw :bottle, :bottle_sha1
     attr_rw(*CHECKSUM_TYPES)
+    attr_rw :keep_install_names
 
     def head val=nil, specs=nil
       return @head if val.nil?

diff --git a/Library/Homebrew/formula_installer.rb b/Library/Homebrew/formula_installer.rb
index c2c04c8..2182877 100644
--- a/Library/Homebrew/formula_installer.rb
+++ b/Library/Homebrew/formula_installer.rb
@@ -96,8 +96,12 @@ class FormulaInstaller
       link
       check_PATH
     end
-    fix_install_names
-
+    unless f.keep_install_names?
+      fix_install_names
+    else
+      rpath_install_names
+    end
+    
     ohai "Summary" if ARGV.verbose? or show_summary_heading
     print "#{f.prefix}: #{f.prefix.abv}"
     print ", built in #{pretty_duration build_time}" if build_time
@@ -175,6 +179,16 @@ class FormulaInstaller
     ohai e, e.backtrace if ARGV.debug?
     @show_summary_heading = true
   end
+  
+  def rpath_install_names
+    Keg.new(f.prefix).rpath_install_names
+  rescue Exception => e
+    onoe "Failed to fix install names"
+    puts "The formula built, but you may encounter issues using it or linking other"
+    puts "formula against it."
+    ohai e, e.backtrace if ARGV.debug?
+    @show_summary_heading = true
+  end
 
   def clean
     require 'cleaner'

diff --git a/Library/Homebrew/keg_fix_install_names.rb b/Library/Homebrew/keg_fix_install_names.rb
index d3117b6..15b5141 100644
--- a/Library/Homebrew/keg_fix_install_names.rb
+++ b/Library/Homebrew/keg_fix_install_names.rb
@@ -12,7 +12,34 @@ class Keg
       end
     end
   end
-
+  
+  def rpath_install_names
+    ohai "Fixing libs to use @rpath"
+    dylibs.each do |dylib|
+      dylib.ensure_writable do
+        dylib_name = dylib.to_s
+        dylib_basename = Pathname.new(dylib).relative_path_from(join 'lib')
+        # Change the absolute path to @rpath/dylib using install_name_tool -id.
+        system "install_name_tool", "-id", "@rpath/#{dylib_basename}", "#{dylib_name}"
+      end
+    end
+    
+    ohai "Adding @rpath to binaries"
+    lib = join 'lib'
+    binaries.each do |binary|
+      absolute_install_names_for binary do |id, absolute_names|
+        binary.ensure_writable do
+          system "install_name_tool", "-add_rpath", "@loader_path/../lib", "#{binary}"
+          system "install_name_tool", "-add_rpath", "#{lib}", "#{binary}"
+          absolute_names.each do |absolute_name|
+            dylib_basename = Pathname.new(absolute_name).relative_path_from(lib)
+            system "install_name_tool", "-change", "#{absolute_name}", "@rpath/#{dylib_basename}", "#{binary}"
+          end
+        end
+      end
+    end
+  end
+  
   private
 
   OTOOL_RX = /\t(.*) \(compatibility version (\d+\.)*\d+, current version (\d+\.)*\d+\)/
@@ -36,7 +63,26 @@ class Keg
 
     yield id, install_names
   end
+  
+  def absolute_install_names_for binary
+    binary = binary.to_s
 
+    ENV['HOMEBREW_BINARY'] = binary # solves all shell escaping problems
+    install_names = `otool -L "$HOMEBREW_BINARY"`.split "\n"
+    
+    install_names.shift # first line is fluff
+    install_names.map!{ |s| OTOOL_RX =~ s && $1 }
+    install_names.compact!
+    # Only include those dylibs which are point into HOMEBREW_PREFIX
+    install_names.reject!{ |fn| !(fn =~ /^#{HOMEBREW_PREFIX}/) }
+    
+    # the shortpath ensures that library upgrades donâ€™t break installed tools
+    shortpath = HOMEBREW_PREFIX + Pathname.new(binary).relative_path_from(self)
+    id = if shortpath.exist? then shortpath else binary end
+    
+    yield id, install_names
+  end
+  
   def dylibs
     if (lib = join 'lib').directory?
       lib.children.select{ |pn| pn.extname == '.dylib' and not pn.symlink? }
@@ -44,4 +90,12 @@ class Keg
       []
     end
   end
+  
+  def binaries
+    if(bin = join 'bin').directory?
+      bin.children.select { |pn| not pn.symlink? }
+    else
+      []
+    end
+  end
 end
